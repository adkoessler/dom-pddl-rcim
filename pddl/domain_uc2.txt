(define (domain mrod)
	(:requirements :strips :typing :action-costs :adl)
	(:types
		actuator actuatorType actuatorSet perceptor perceptorType perceptorSet do doDim doState stateValue variable variableRole variableType tool toolType
	)
	(:constants
		spatialRobot planarRobot rotationAxis - actuatorType
		jointPositionSensor jointVelocitySensor toolPositionSensor toolVelocitySensor toolForceSensor toolTactileSensor tool2DVisionSensor cell2DVisionSensor cell3DVisionSensor - perceptorType
		linear planar spatial - doDim
		isometric elastic - doBehav
		textured textureless - doTex
		statePosition stateShape stateStress - doState
		initialValue targetValue validValue unknownValue - stateValue
		measured control target - variableRole
		jointPosition jointVelocity jointTorque toolPosition toolVelocity toolForce toolHybridFP objectPosition objectShape objectShape objectStress object2DImage objectPointCloud objectPartialPointCloud - variableType
		simpleGripper magneticGripper suctionGripper - toolType
	)
	(:predicates
		;actuators
		(activeA ?a - actuator)
		(hasTypeA ?a - actuator ?at - actuatorType)
		(belongsA ?a - actuator ?as - actuatorSet)
		(hasMountedT ?a - actuator ?t - tool)
		(canMountT ?a - actuator ?tt - toolType)
		(hasMountedP ?a - actuator ?p - perceptor)
		(canMountP ?a - actuator ?pt - perceptorType)
		(hasControlledV ?a - actuator ?v - variable)
		(canControlV ?a - actuator ?vt - variableType)
		(canHandleO ?a - actuator ?dt - doDim)
		(hasHandledO ?a - actuator ?do - do)
		;perceptors
		(activeP ?p - perceptor)
		(hasTypeP ?p - perceptor ?pt - perceptorType)
		(belongsP ?p - perceptor ?ps - perceptorSet)
		(canPercieveO ?p - perceptor ?do - do)
		(canMeasureV ?p - perceptor ?vt - variableType)
		(hasMeasuredOV ?do - do ?v - variable) ;for measuring object values
		(hasMeasuredAV ?a - actuator ?v - variable) ;for measuring actuator values
		;objects
		(hasDimO ?do - do ?dt - doDim)
		(hasBehavO ?do - do ?db - doBehav)
		(hasTexO ?do - do ?dx - doTex)
		(hasStateValue ?do - do ?ds - doState ?sv - stateValue)
		;variables
		(isStreamedV ?v - variable)
		(hasTypeV ?v - variable ?vt - variableType)
		(hasRoleV ?v - variable ?vr - variableRole)
		;tools
		(hasTypeT ?t - tool ?tt - toolType)
		(canHandleOT ?tt - toolType ?dt - do)
	)
	(:functions
		(perceptorTypeCount ?ps - perceptorSet ?pt - perceptorType) - number
		(actuatorTypeCount ?as - actuatorSet ?at - actuatorType) - number
		;(actuationcount ?as - actuationset) - number
		;(innerloopcount ?as - actuationset ?i - innerloop) - number
		;(validgrasp ?do - do) - number
		;(validshape ?do - do) - number
		(total-cost) - number
	)
	
	; Nicolas controller
	;(:action controlUnrollingVelocityTension1D
	;	:parameters
	;		(?ar ?ab - actuator ?as - actuatorSet ?do - do ?svp ?svh ?svs - stateValue ?vin1 ?vin2 ?vin3 ?vout - variable)
	;	:precondition
	;		(and
	;			(hasDimO ?do linear) (hasHandledO ?ar ?do) (hasHandledO ?ab ?do) ;1st condition: object handled is linear
	;			(belongsA ?ar ?as) (hasTypeA ?ar spatialRobot)  ;2nd condition: one actuator is a robot with a simpleGripper tool
	;			(belongsA ?ab ?as) (hasTypeA ?ab rotationAxis) (hasControlledV ?ab ?vout) (hasTypeV ?vout jointVelocity) ;3rd condition: one actuator is an axis with velocity control
	;			(hasTypeV ?vin1 objectStress) (hasMeasuredOV ?do ?vin1) ;4th condition: a measurement of object stress is available 
	;			(hasTypeV ?vin2 objectShape) (hasMeasuredOV ?do ?vin2) ;5th condition: a measurement of object shape is available
	;			(hasTypeV ?vin3 jointVelocity) (hasMeasuredAV ?ab ?vin3) ;6th condition: coil has velocity proprioception
	;		)
	;	:effect
	;		(and
	;			(not(hasStateValue ?do statePosition ?svp)) ;delete initial stateValues
	;			(not(hasStateValue ?do stateShape ?svh))
	;			(not(hasStateValue ?do stateStress ?svs))
	;			(hasStateValue ?do statePosition targetValue) ;replace with outcomes
	;			(hasStateValue ?do stateShape validValue)
	;			(hasStateValue ?do stateStress validValue)
	;			(increase (total-cost) 100)
	;		)
	;)

	; Flixeder 2017 controller for coordinated transportation of 1D isometric objects
	(:action coordTransportation1DFlixeder2017
		:parameters
			(?ar1 ?ar2 - actuator ?as - actuatorSet ?do - do ?svp ?svh ?svs - stateValue ?vin_st ?vin_pr1 ?vin_pr2 ?vin_fr2 ?vout_r1 ?vout_r2 - variable)
		:precondition
			(and
				(not(= ?ar1 ?ar2))
				(hasDimO ?do linear) (hasBehavO ?do isometric) (hasHandledO ?ar1 ?do) (hasHandledO ?ar2 ?do) ;1st condition: object handled by the two robots is linear and isometric
				(belongsA ?ar1 ?as) (hasTypeA ?ar1 spatialRobot) (hasControlledV ?ar1 ?vout_r1) (hasTypeV ?vout_r1 jointPosition) ;2nd condition: master actuator is position controlled
				(belongsA ?ar2 ?as) (hasTypeA ?ar2 spatialRobot) (hasControlledV ?ar2 ?vout_r2) (hasTypeV ?vout_r2 toolHybridFP) ;3rd condition: slave actuator is hybrid FP controlled
				(hasTypeV ?vin_st objectStress) (hasMeasuredOV ?do ?vin_st) ;4th condition: a measurement of object stress at slave robot grasp is available 
				(hasTypeV ?vin_pr1 jointPosition) (hasMeasuredAV ?ar1 ?vin_pr1) ;5th condition: a measurement of master robot tool pose is available
				(hasTypeV ?vin_pr2 jointPosition) (hasMeasuredAV ?ar2 ?vin_pr2) (hasTypeV ?vin_fr2 toolForce) (hasMeasuredAV ?ar2 ?vin_fr2) ;6th condition: a measurement of slave robot tool pose and force is avaliable
			)
		:effect
			(and
				(not(hasStateValue ?do statePosition ?svp)) ;delete initial stateValues
				(not(hasStateValue ?do stateShape ?svh))
				(not(hasStateValue ?do stateStress ?svs))
				(hasStateValue ?do statePosition targetValue) ;replace with outcomes
				(hasStateValue ?do stateShape unknownValue)
				(hasStateValue ?do stateStress targetValue)
				(increase (total-cost) 100)
			)
	)
	
	; Aranda 2020: coordinated shape servoing of planar isometric objects
	(:action coordShapeServo2DAranda2020
		:parameters
			(?ar1 ?ar2 - actuator ?as - actuatorSet ?do - do ?svp ?svh ?svs - stateValue ?vin_pr1 ?vin_pr2 ?vin_os ?vout_r1 ?vout_r2 - variable)
		:precondition
			(and
				(not(= ?ar1 ?ar2)) ;cannot use the same actuator twice
				(hasDimO ?do planar) (hasBehavO ?do isometric) (hasHandledO ?ar1 ?do) (hasHandledO ?ar2 ?do) ;1st condition: object handled by the two robots is linear and isometric
				(belongsA ?ar1 ?as) (hasTypeA ?ar1 spatialRobot) (hasControlledV ?ar1 ?vout_r1) (hasTypeV ?vout_r1 jointPosition) ;2nd condition: master actuator is position controlled
				(belongsA ?ar2 ?as) (hasTypeA ?ar2 spatialRobot) (hasControlledV ?ar2 ?vout_r2) (hasTypeV ?vout_r2 jointPosition) ;3rd condition: slave actuator is hybrid FP controlled
				(hasTypeV ?vin_os objectShape) (hasMeasuredOV ?do ?vin_os) ;4th condition: a measurement of object shape is available
				(hasTypeV ?vin_pr1 jointPosition) (hasMeasuredAV ?ar1 ?vin_pr1) ;5th condition: a measurement of master robot tool pose is available
				(hasTypeV ?vin_pr2 jointPosition) (hasMeasuredAV ?ar2 ?vin_pr2) ;6th condition: a measurement of slave robot tool pose is avaliable
			)
		:effect
			(and
				(not(hasStateValue ?do statePosition ?svp)) ;delete initial stateValues
				(not(hasStateValue ?do stateShape ?svh))
				(not(hasStateValue ?do stateStress ?svs))
				(hasStateValue ?do statePosition targetValue) ;object pose is controlled (see IV.C.)
				(hasStateValue ?do stateShape targetValue) ;object shape is controlled
				(hasStateValue ?do stateStress unknownValue) ;tensions remain unknown
				(increase (total-cost) 100)
			)
	)
	
	;Use SfT to deduce pointCloud from 2DImage
	(:action enableShapeFromTemplate
		:parameters
			(?vin ?vout - variable ?do - do)
		:precondition
			(and
				(hasDimO ?do planar) ;SfT only for 2D objects
				(hasTexO ?do textured) ;SfT only for textured objects
				(hasMeasuredOV ?do ?vin) ;initial var is already measured
				(hasTypeV ?vin object2DImage) ;initial var is a 2DImage
				(hasTypeV ?vout objectShape) ;final var is a pointCloud
			)
		:effect
			(and
				(hasMeasuredOV ?do ?vout)
				(increase (total-cost) 10)
			)
	)
	
	; Transform partialPointCloud variable into shape variable
	(:action getShapeFromPartialPointCloud
		:parameters
			(?do - do ?vin ?vout - variable)
		:precondition
			(and
				(hasMeasuredOV ?do ?vin)
				(hastypeV ?vin objectPartialPointCloud)
				(hastypeV ?vout objectShape)
			)
		:effect
			(and
				(hasMeasuredOV ?do ?vout)
				(increase (total-cost) 100)
			)
	)

	; Transform pointCloud variable into shape variable
	(:action getShapeFromPointCloud
		:parameters
			(?do - do ?vin ?vout - variable)
		:precondition
			(and
				(hasMeasuredOV ?do ?vin)
				(hastypeV ?vin objectPointCloud)
				(hastypeV ?vout objectShape)
			)
		:effect
			(and
				(hasMeasuredOV ?do ?vout)
			)
	)

	; Transform pointCloud variable into position variable
	(:action getPositionFromPointCloud
		:parameters
			(?do - do ?vin ?vout - variable)
		:precondition
			(and
				(hasMeasuredOV ?do ?vin)
				(hastypeV ?vin objectPointCloud)
				(hastypeV ?vout objectPosition)
			)
		:effect
			(and
				(hasMeasuredOV ?do ?vout)
			)
	)

	; Transform jointPosition variable into toolPosition variable
	(:action enableFPK
		:parameters
			(?a - actuator ?vin ?vout - variable)
		:precondition
			(and
				(hasMeasuredAV ?a ?vin) ;input varible is measured by proprioception
				(hasTypeV ?vin jointPosition) ;input variable type is jointPosition
				(hasTypeV ?vout toolPosition) ;output variable type is toolPosition
				(not
					(exists(?a2 - actuator)
						(hasMeasuredAV ?a2 ?vout) ;output variable is not used by another proprioceptor
					)	
				)
				(exists(?vr2 - variableRole)
					(and
						(hasRoleV ?vin ?vr2) ;input and output variable have the same role
						(hasRoleV ?vout ?vr2)
					)
				)
			)
		:effect
			(hasMeasuredAV ?a ?vout)
	)

	; Transform toolPosition variable into jointPosition variable
	(:action enableIPK
		:parameters
			(?a - actuator ?vin ?vout - variable)
		:precondition
			(and
				(hasMeasuredAV ?a ?vin)
				(hasTypeV ?vin toolPosition)
				(hasTypeV ?vout jointPosition)
				(not
					(exists(?a2 - actuator)
						(hasMeasuredAV ?a2 ?vout) ;output variable is not used by another proprioceptor
					)
				)
				(exists(?vr2 - variableRole)
					(and
						(hasRoleV ?vin ?vr2) ;input and output variable have the same role
						(hasRoleV ?vout ?vr2)
					)
				)
			)
		:effect
			(hasMeasuredAV ?a ?vout)
	)


	; Give ability to vision sensor to measure object tension
	(:action enable1DTensionFromShape
		:parameters
			(?vin ?vout - variable ?do - do)
		:precondition
			(and
				(hasDimO ?do linear) ;only for linear objects
				(hasMeasuredOV ?do ?vin) ;initial var is already measured
				(hasTypeV ?vin objectShape) ;initial var is a shape
				(hasTypeV ?vout objectStress) ;final var is a stress
			)
		:effect
			(and
				(hasMeasuredOV ?do ?vout)
				(increase (total-cost) 10)
			)
	)

	; Give ability to force sensor to measure object tension
	(:action enable1DTensionFromForce 
		:parameters
			(?vin ?vout - variable ?do - do ?a - actuator)
		:precondition
			(and
				(hasDimO ?do linear) ;only for linear objects
				(hasHandledO ?a ?do) ;object is handled by actuator
				(hasMeasuredAV ?a ?vin) ;initial var is already measured
				(hasTypeV ?vin toolForce) ;initial var is a force
				(hasTypeV ?vout objectStress) ; final var is a stress
			)
		:effect
			(and
				(hasMeasuredOV ?do ?vout)
				(increase (total-cost) 100)
			)
	)

	; Get object data from sensors
	(:action getExteroSensorData
		:parameters
			(?ps - perceptorSet ?p - perceptor ?v - variable ?vt - variableType ?do - do)
		:precondition
			(and
				(not(hasMeasuredOV ?do ?v)) ;data is not already gotten
				(not
					(exists (?do2 - do)
						(hasMeasuredOV ?do2 ?v) ;var not already used by another exteroceptor
					)
				)
				(activeP ?p) ;sensor is active
				(belongsP ?p ?ps) ;sensor is in perceptorSet
				(canMeasureV ?p ?vt) ;sensor can measure variableType
				(hasTypeV ?v ?vt) ;variable has appropriate type
				(canPercieveO ?p ?do) ;sensor can percieve object
				(hasRoleV ?v measured) ;variable is made for measurement
			)
		:effect
			(and
				(hasMeasuredOV ?do ?v)
			)
	)

	; Get actuator data from sensors
	(:action getProprioSensorData
		:parameters
			(?ps - perceptorSet ?p - perceptor ?v - variable ?vt - variableType ?a - actuator ?as - actuatorSet)
		:precondition
			(and
				(not(hasMeasuredAV ?a ?v)) ;data is not already gotten
				(not
					(exists (?a2 - actuator)
						(hasMeasuredAV ?a2 ?v) ;var not already used by another proprioceptor
					)
				)
				(activeP ?p) ;sensor is active
				(belongsP ?p ?ps) ;sensor is in perceptorSet
				(activeA ?a) ;actuator is active
				(belongsA ?a ?as) ;actuator is in actuatorSet
				(canMeasureV ?p ?vt) ;sensor can measure variableType
				(hasTypeV ?v ?vt) ;variable has appropriate type
				(hasMountedP ?a ?p) ;sensor can percieve actuator
				(hasRoleV ?v measured) ;variable is made for measurement
			)
		:effect
			(and
				(hasMeasuredAV ?a ?v)
			)
	)

	; Change actuator innerloop
	(:action controlV
		:parameters
			(?a - actuator ?v - variable ?vt - variableType)
		:precondition
			(and
				(not(hasControlledV ?a ?v)) ;not already controlled by ?v
				(not
					(exists (?v2 - variable)
						(hasControlledV ?a ?v2) ;not already controlled by another var
					)
				)
				(not
					(exists (?a2 - actuator)
						(hasControlledV ?a2 ?v) ;var not already controlling another actuator
					)
				)
				(hasTypeV ?v ?vt)
				(canControlV ?a ?vt)
				(hasRoleV ?v control)
			)
		:effect
			(hasControlledV ?a ?v)
	)

	; Change actuator innerloop
	(:action uncontrolV
		:parameters
			(?a - actuator ?v - variable ?vt - variableType)
		:precondition
			(and
				(hasControlledV ?a ?v) ;already controlled by ?v
				(hasTypeV ?v ?vt)
				(canControlV ?a ?vt)
				(hasRoleV ?v control)
			)
		:effect
			(not(hasControlledV ?a ?v))
	)

	; Change tool
	(:action mountT
		:parameters
			(?a - actuator ?t - tool ?tt - toolType)
		:precondition
			(and
				(not(hasMountedT ?a ?t)) ;tool not already mounted on ?a
				(not
					(exists (?a2 - actuator)
						(hasMountedT ?a2 ?t) ;tool not already mounted on another actuator
					)
				)
				(not
					(exists (?t2 - tool)
						(hasMountedT ?a ?t2) ;no other tool already mounted on ?a
					)
				)
				(hasTypeT ?t ?tt)
				(canMountT ?a ?tt)
			)
		:effect
			(and
				(hasMountedT ?a ?t)
				(increase (total-cost) 10)
			)
	)

	; Change tool
	(:action unmountT
		:parameters
			(?a - actuator ?t - tool ?tt - toolType)
		:precondition
			(and
				(hasMountedT ?a ?t)
				(hasTypeT ?t ?tt)
				(canMountT ?a ?tt)
			)
		:effect
			(and
				(not(hasMountedT ?a ?t))
				(increase (total-cost) 10)
			)
	)

	; Handle object
	(:action handleO
		:parameters
			(?a - actuator ?do - do ?dt - doDim ?t - tool ?tt - toolType)
		:precondition
			(and
				(not(hasHandledO ?a ?do))
				(hasMountedT ?a ?t)
				(hasTypeT ?t ?tt)
				(hasDimO ?do ?dt)
				(canHandleOT ?tt ?do)
			)
		:effect
			(hasHandledO ?a ?do)
	)

	; Handle object
	(:action unhandleO
		:parameters
			(?a - actuator ?do - do ?dt - doDim ?t - tool ?tt - toolType)
		:precondition
			(and
				(hasHandledO ?a ?do)
				(hasMountedT ?a ?t)
				(hasTypeT ?t ?tt)
				(hasDimO ?do ?dt)
				(canHandleOT ?tt ?do)
			)
		:effect
			(not(hasHandledO ?a ?do))
	)

	(:action activateA
		:parameters
			(?a - actuator)
		:precondition
			(not(activeA ?a))
		:effect
			(and
				(activeA ?a)
				(forall (?p - perceptor)
					(when
						(hasMountedP ?a ?p)
						(activeP ?p)
					)
				)
			)
	)

	(:action deactivateA
		:parameters
			(?a - actuator)
		:precondition
			(activeA ?a)
		:effect
			(and
				(not(activeA ?a))
				(forall (?p - perceptor)
					(when
						(hasMountedP ?a ?p)
						(not(activeP ?p))
					)
				)
			)
	)

	(:action activateP
		:parameters
			(?p - perceptor)
		:precondition
			(and
				(not(activeP ?p))
				(not
					(exists (?a - actuator)
						(hasMountedP ?a ?p)
					)
				)
			)
		:effect
			(and
				(activeP ?p)
			)
	)
	  
	(:action deactivateP
		:parameters
			(?p - perceptor)
		:precondition
			(activeP ?P)
		:effect
			(and
				(not(activeP ?p))
			)
	)

	(:action addASet
		:parameters
			(?a - actuator ?as - actuatorSet)
		:precondition
			(and
				(activeA ?a)
				(not(belongsA ?a ?as))
				(not
					(exists(?as2 - actuatorSet)
						(belongsA ?a ?as2)
					)
				)
			)
		:effect
			(belongsA ?a ?as)
	)

	(:action removeASet
		:parameters
			(?a - actuator ?as - actuatorSet)
		:precondition
			(and
				(activeA ?a)
				(belongsA ?a ?as)
			)
		:effect
			(not(belongsA ?a ?as))
	)

	(:action addPSet
		:parameters
			(?p - perceptor ?ps - perceptorSet)
		:precondition
			(and
				(activeP ?p)
				(not(belongsP ?p ?ps))
			)
		:effect
			(belongsP ?p ?ps)
	)

	(:action removePSet
		:parameters
			(?p - perceptor ?ps - perceptorSet)
		:precondition
			(and
				(activeP ?p)
				(belongsP ?p ?ps)
			)
		:effect
			(not(belongsP ?p ?ps))
	)
)
